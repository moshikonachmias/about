{"version":3,"sources":["assets/icons/flag.svg","assets/icons/location.svg","assets/icons/emplo.svg","assets/icons/fb.svg","assets/icons/instegramIcon.svg","assets/icons/linkedinIcon.svg","assets/icons/money.svg","assets/icons/twitter.svg","assets/cover.svg","components/box/box.js","pages/main/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Box","text","link","className","href","target","rel","Main","props","social","icon","fb","src","twitter","linkedinIcon","instegramIcon","headers","location","title","subtitle","money","flag","emplo","id","cover","alt","map","header","items","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,uMCiB5BC,MATf,YAA8B,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACjB,OACI,uBAAGC,UAAU,MAAMC,KAAMF,EAAMG,OAAO,SAASC,IAAI,uBAC/C,0BAAMH,UAAU,aAAaF,GAC7B,wBAAIE,UAAU,a,0JCuHXI,MAnHf,SAAcC,GACV,IAAMC,EAAS,CACX,CACIC,KAAMC,IACNC,IAAK,uCAET,CACIF,KAAMG,IACND,IAAK,gCAET,CACIF,KAAMI,IACNF,IAAK,6CAET,CACIF,KAAMK,IACNH,IAAK,uCAIPI,EAAU,CACZ,CACIJ,IAAKK,IACLC,MAAO,WACPC,SAAU,YAEd,CACIP,IAAKQ,IACLF,MAAO,SACPC,SAAU,SAEd,CACIP,IAAKS,IACLH,MAAO,aACPC,SAAU,QAEd,CACIP,IAAKU,IACLJ,MAAO,YACPC,SAAU,SAuClB,OACI,yBAAKI,GAAG,QACJ,yBAAKpB,UAAU,YACVS,IAAKY,IAAOC,IAAI,UACrB,yBAAKtB,UAAU,UACVa,EAAQU,KAAI,YAA+B,IAA5Bd,EAA2B,EAA3BA,IAAKM,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OAAO,yBAAKhB,UAAU,eAClB,yBAAKA,UAAU,aAAaS,IAAKA,EAAKa,IAAKP,IAC3C,0BAAMf,UAAU,oBAAoBe,GACpC,0BAAMf,UAAU,mBAAmBgB,QA5CtC,CACb,CACIQ,OAAQ,iBACRC,MAAO,CACH,CACI3B,KAAM,cACNC,KAAM,0BAEV,CACID,KAAM,cACNC,KAAM,0BAEV,CACID,KAAM,eACNC,KAAM,4BAGlB,CACIyB,OAAQ,yBACRC,MAAO,CACH,CACI3B,KAAM,UACNC,KAAM,0BAEV,CACID,KAAM,YACNC,KAAM,0BAEV,CACID,KAAM,UACNC,KAAM,6BAmBJwB,KAAI,YAAwB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACrB,OAAQ,oCACJ,wBAAIzB,UAAU,uBAAuBwB,GACrC,yBAAKxB,UAAU,WACVyB,EAAMF,KAAI,YAAqB,IAAlBzB,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAChB,OAAO,kBAAC,EAAD,CAAKD,KAAMA,EAAMC,KAAMA,YAK9C,yBAAKC,UAAU,UACVM,EAAOiB,KAAI,YAAoB,IAAjBhB,EAAgB,EAAhBA,KAAME,EAAU,EAAVA,IACjB,OAAQ,yBAAKT,UAAU,eACnB,uBAAGC,KAAMQ,EAAKP,OAAO,SAASC,IAAI,uBAC9B,yBAAKH,UAAU,aAAaS,IAAKF,EAAMe,IAAKb,YChGzDiB,MAtBf,WACE,OACI,kBAAC,EAAD,OCMcC,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.876d4d63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flag.55f3c6d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/location.9ad5060e.svg\";","module.exports = __webpack_public_path__ + \"static/media/emplo.4369af79.svg\";","module.exports = __webpack_public_path__ + \"static/media/fb.06404791.svg\";","module.exports = __webpack_public_path__ + \"static/media/instegramIcon.03e96dc4.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedinIcon.09b73764.svg\";","module.exports = __webpack_public_path__ + \"static/media/money.b70f6a44.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.d26bb62c.svg\";","module.exports = __webpack_public_path__ + \"static/media/cover.d673bcc4.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './box.scss';\r\n\r\nBox.propTypes = {\r\n    text: PropTypes.string,\r\n};\r\n\r\nfunction Box({ text, link }) {\r\n    return (\r\n        <a className='box' href={link} target=\"_blank\" rel='noreferrer noopener'>\r\n            <span className='box-title'>{text}</span>\r\n            <hr className='box-hr'/>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default Box;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Box from \"../../components/box/box\";\r\nimport './main.scss'\r\nimport flag from '../../assets/icons/flag.svg';\r\nimport location from '../../assets/icons/location.svg';\r\nimport emplo from '../../assets/icons/emplo.svg';\r\nimport fb from '../../assets/icons/fb.svg';\r\nimport instegramIcon from '../../assets/icons/instegramIcon.svg';\r\nimport linkedinIcon from '../../assets/icons/linkedinIcon.svg';\r\nimport money from '../../assets/icons/money.svg';\r\nimport twitter from '../../assets/icons/twitter.svg';\r\nimport cover from '../../assets/cover.svg';\r\n\r\nMain.propTypes = {};\r\n\r\nfunction Main(props) {\r\n    const social = [\r\n        {\r\n            icon: fb,\r\n            src: 'https://www.facebook.com/To.GongIO/'\r\n        },\r\n        {\r\n            icon: twitter,\r\n            src: 'https://twitter.com/gong_io/'\r\n        },\r\n        {\r\n            icon: linkedinIcon,\r\n            src: 'https://www.linkedin.com/company/gong-io/'\r\n        },\r\n        {\r\n            icon: instegramIcon,\r\n            src: 'https://www.instagram.com/gong.io/'\r\n        },\r\n    ]\r\n\r\n    const headers = [\r\n        {\r\n            src: location,\r\n            title: 'LOCATION',\r\n            subtitle: 'TLV | SF'\r\n        },\r\n        {\r\n            src: money,\r\n            title: 'RAISED',\r\n            subtitle: '$134M'\r\n        },\r\n        {\r\n            src: flag,\r\n            title: 'FOUNDED IN',\r\n            subtitle: '2015'\r\n        },\r\n        {\r\n            src: emplo,\r\n            title: 'EMPLOYEES',\r\n            subtitle: '300+'\r\n        },\r\n    ]\r\n\r\n    const sections = [\r\n        {\r\n            header: 'GET TO KNOW US',\r\n            items: [\r\n                {\r\n                    text: 'OUR PRODUCT',\r\n                    link: 'https://www.google.com'\r\n                },\r\n                {\r\n                    text: 'OUR MINDSET',\r\n                    link: 'https://www.google.com'\r\n                },\r\n                {\r\n                    text: 'TRENDING NOW',\r\n                    link: 'https://www.google.com'\r\n                }],\r\n        },\r\n        {\r\n            header: 'WHy YOU SHOULD JOIN US',\r\n            items: [\r\n                {\r\n                    text: 'REVIEWS',\r\n                    link: 'https://www.google.com'\r\n                },\r\n                {\r\n                    text: 'GONGSTERS',\r\n                    link: 'https://www.google.com'\r\n                },\r\n                {\r\n                    text: 'CULTURE',\r\n                    link: 'https://www.google.com'\r\n                }],\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div id='main'>\r\n            <img className='cover-img'\r\n                 src={cover} alt='cover'/>\r\n            <div className='header'>\r\n                {headers.map(({ src, title, subtitle }) => {\r\n                    return <div className='header-item'>\r\n                        <img className='header-img' src={src} alt={title}/>\r\n                        <span className='title icon-title'>{title}</span>\r\n                        <span className='header-subtitle'>{subtitle}</span>\r\n                    </div>\r\n                })}\r\n\r\n            </div>\r\n            {sections.map(({ header, items }) => {\r\n                return (<>\r\n                    <h1 className='title section-title'>{header}</h1>\r\n                    <div className='section'>\r\n                        {items.map(({ text, link }) => {\r\n                            return <Box text={text} link={link}/>\r\n                        })}\r\n                    </div>\r\n                </>)\r\n            })}\r\n            <div className='footer'>\r\n                {social.map(({ icon, src }) => {\r\n                    return (<div className='footer-item'>\r\n                        <a href={src} target=\"_blank\" rel=\"noreferrer noopener\">\r\n                            <img className='footer-img' src={icon} alt={src}/>\r\n                        </a>\r\n                    </div>)\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from \"./pages/main/main\";\n\nfunction App() {\n  return (\n      <Main/>\n    /*<div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>*/\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}